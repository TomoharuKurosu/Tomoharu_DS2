{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "15T-eUsgji4WVTAIEVdk6Spw8TXP13N5D",
      "authorship_tag": "ABX9TyMUj4l3gnU/tZmibe8imbMI",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/TomoharuKurosu/Tomoharu_DS2/blob/main/%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E8%A7%A3%E8%AA%AD\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JWMPajf7A3qk",
        "outputId": "bcd092fb-28f8-4ec9-c478-1caae4f6b352"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#serring.pyについてメモ\n",
        "# %% init\n",
        "import unicodedata\n",
        "from pathlib import Path #ファイルシステムの操作 osもファイルシステムの操作\n",
        "from tqdm import tqdm #プログラムの進行状況の表示\n",
        "import sys, os, time, datetime #日付と時間の操作\n",
        "import pandas as pd, numpy as np #データの読み込み、処理、操作\n",
        "!pip install japanize-matplotlib\n",
        "import matplotlib.pyplot as plt, seaborn as sns, japanize_matplotlib #データの可視化\n",
        "pd.options.display.max_rows = 100 #データフレームを表示する際に、最大100行まで表示する\n",
        "plt.rcParams['figure.figsize'] = (10, 6) #プロットの図のサイズを幅10インチ、高さ6インチに設定\n",
        "plt.rcParams['font.size'] = 14 #プロット内のフォントサイズを14\n",
        "plt.style.use('ggplot') #プロットのスタイルをggplotに設定しています。ggplotは視覚的に見やすいスタイルで、デフォルトのMatplotlibスタイル\n",
        "plt.title('title') #プロットのタイトル設定\n",
        "plt.plot() #空のプロットを表示\n",
        "plt.xlabel('label') #x軸のラベル追加\n",
        "plt.ylabel('label') #y軸のラベル追加\n",
        "plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0, fontsize=18) #凡例の設定\n",
        "\n",
        "import plotly.express as px #Plotly Expressは、高レベルのプロットライブラリで、データの可視化を簡単に行うためのツール\n",
        "\n",
        "# %%\n",
        "P_IN = \"../data_raw/\" #データの入力\n",
        "# P_IN = \"../recieve/\"\n",
        "P_IN1 = \"../receive/20231027_マスキングデータ/マスキングデータ一覧/\" #データの入力\n",
        "P_OUT = \"../data_clns/\" #データの出力\n",
        "\n",
        "\n",
        "\n",
        "# %% #mean欠損値の割合を示す. sizeはデータ全体の数、sumは欠損値のデータ数　Tは転置を示す\n",
        "def check_na(df):\n",
        "    display(df.isna().agg(['size', 'count', 'sum', 'mean']).T)\n",
        "    return df\n",
        "#sがNoneなら何も表示されず、そうでないなら転置した行列が表示される。\n",
        "def check_df(df, s=None):\n",
        "    if s: print(s)\n",
        "    display(df.T)\n",
        "    return df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 821
        },
        "id": "jjcvtmCMFUij",
        "outputId": "b98aede8-7251-43dd-c271-7d567de95ff0"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: japanize-matplotlib in /usr/local/lib/python3.10/dist-packages (1.1.3)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from japanize-matplotlib) (3.7.1)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->japanize-matplotlib) (1.2.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->japanize-matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->japanize-matplotlib) (4.53.1)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->japanize-matplotlib) (1.4.5)\n",
            "Requirement already satisfied: numpy>=1.20 in /usr/local/lib/python3.10/dist-packages (from matplotlib->japanize-matplotlib) (1.26.4)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->japanize-matplotlib) (24.1)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->japanize-matplotlib) (9.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->japanize-matplotlib) (3.1.2)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib->japanize-matplotlib) (2.8.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib->japanize-matplotlib) (1.16.0)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.legend:No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import sys\n",
        "sys.path.append('..')  # 親ディレクトリ内のモジュールやパッケージをインポートすることができるようになります。\n",
        "\n",
        "\n",
        "# %% init #\n",
        "from setting import * #setting モジュールからすべての公開された内容をインポートします\n",
        "\n",
        "# %% #指定したディレクトリ ../data_clns+/ 内のすべてのファイルとサブディレクトリの名前を再帰的に取得して表示します。\n",
        "[print(p.name) for p in Path(\"../data_clns+/\").rglob(\"*\")]\n",
        "# %% 読み込み\n",
        "df_pop = (\n",
        "    pd\n",
        "    .read_csv(\"../data_clns+/0.母集団.csv\")\n",
        ")\n",
        "df_pop\n",
        "# %%\n",
        "def join_data(df_base, fname):\n",
        "    df = pd.read_csv(\"../data_clns+/\"+fname) #ファイルの読み込み\n",
        "    group = fname.split(\"_\")[0].replace(\"no\", \"\") #fname からファイル名の最初の部分を抽出し、\"no\" という文字列を削除して group 変数に格納します。例えば、\"no123_data.csv\" というファイル名の場合、group は \"123_data\" になります。\n",
        "    key = \"宛名番号\" if \"宛名番号\" in df.columns else \"世帯番号\" #f 内に \"宛名番号\" 列が存在する場合はそれを key に設定し、存在しない場合は \"世帯番号\" を key に設定\n",
        "    cols = {c:(group+\"_\"+c) for c in df.columns if c not in [key, \"年度\"]} #列名の重複を防止？？\n",
        "    #データフレームの結合と列名の変更:\n",
        "    join_ = (\n",
        "        df_base\n",
        "        .merge(\n",
        "            df\n",
        "            , on=[key, \"年度\"]\n",
        "            , how=\"left\"\n",
        "        )\n",
        "        .rename(columns=cols)\n",
        "    )\n",
        "    #欠損値の統計情報の表示:\n",
        "    display(\n",
        "        join_\n",
        "        [cols.values()]\n",
        "        .isna()\n",
        "        .agg([\"size\", \"count\", \"mean\", \"sum\"])\n",
        "        .iloc[:, 0]\n",
        "    )\n",
        "    return join_ #結合結果の返却:\n",
        "fs = [\n",
        "    \"1.要対協_目的変数.csv\",\n",
        "    \"1.要対協_昨年度累計.csv\",\n",
        "    \"1.要対協_昨年度累計_その他.csv\",\n",
        "    \"2.出生～４か月健診.csv\",\n",
        "    \"2.1歳６か月健診.csv\",\n",
        "    \"2.3歳６か月健診.csv\",\n",
        "    \"2.性別.csv\",\n",
        "    \"3.生活保護.csv\",\n",
        "    \"3.児手.csv\",\n",
        "    \"3.児扶.csv\",\n",
        "    \"3.特別児扶.csv\",\n",
        "    \"3.ひとり親医療受給者.csv\",\n",
        "    \"3.こども医療受給者.csv\",\n",
        "    \"3.自立支援医療_厚生医療.csv\",\n",
        "    \"3.自立支援医療_精神通院.csv\",\n",
        "    \"3.自立支援医療_育成医療.csv\",\n",
        "    \"4.世帯人数.csv\",\n",
        "    \"5.障がい児.csv\",\n",
        "    \"5.家児相.csv\",\n",
        "    \"6.要介護.csv\",\n",
        "]\n",
        "#実際にファイルを結合している\n",
        "df_base = df_pop\n",
        "for fname in fs:\n",
        "    print(fname)\n",
        "    df_base = join_data(df_base, fname)\n",
        "    print(df_base.shape)\n",
        "\n",
        "# %%　データマート.csvを作成\n",
        "(\n",
        "    df_base\n",
        "    .to_csv(\"../data_prod/240115_データマート.csv\", index=False)\n",
        ")\n",
        "# %%　データマート.csvの読み込み\n",
        "df_base = pd.read_csv(\"../data_prod/240115_データマート.csv\")\n",
        "df_base\n",
        "#ここより上で様々ンなファイルを結合して、一つのファイルを作成している\n",
        "\n",
        "# %% 年度を基準に各年度の欠損値の割合を表示\n",
        "(\n",
        "    df_base\n",
        "    .set_index(\"年度\")\n",
        "    .isna().mean(axis=1) #.isna() は、各セルが欠損値（NaN）かどうかを True/False で示すデータフレームを返します。.mean(axis=1) は、行ごとに欠損値の割合（平均値）を計算します。これにより、各年度ごとの欠損値の割合が計算されます。\n",
        "    .reset_index()\n",
        "    .groupby(\"年度\")\n",
        "    .describe()\n",
        ")\n",
        "# %%\n",
        "mrt = (\n",
        "    df_base\n",
        "    .join(\n",
        "        df_base\n",
        "        .drop(columns=[\"世帯番号\", \"年度\", \"学年齢\", \"1.要対協_要対協_被虐待フラグ\"]) #これらを消去する\n",
        "        .groupby([\"宛名番号\"], as_index=False) #宛名番号でグループ化\n",
        "        .diff() #前年との差分を計算する\n",
        "        .rename(columns = lambda c: c + \"_昨年差分\") #例えば列の名前を数値Aを用いて数値A_昨年差分に変更する\n",
        "    )\n",
        "    .fillna(-1000) #欠損値は-1000にする\n",
        ")\n",
        "\n",
        "# %%\n",
        "tgt = \"1.要対協_要対協_被虐待フラグ\"\n",
        "\n",
        "# %% 検証用\n",
        "train = mrt.loc[lambda df: df[\"年度\"] >= 2017].loc[lambda df: df[\"年度\"] < 2022] #trainは2017~2022年度\n",
        "test = mrt.loc[lambda df: df[\"年度\"] == 2022] # testは2022年度\n",
        "print(train.shape, test.shape) #トレーニングデータとテストデータのサイズ（行数と列数）が表示されます\n",
        "\n",
        "X_train, y_train = (\n",
        "    train\n",
        "    .iloc[:, 3:]\n",
        "    .drop(columns=tgt)\n",
        "    , train\n",
        "    .iloc[:, 3:]\n",
        "    [tgt]\n",
        ")\n",
        "#X_train:データフレーム train の 3 列目以降からターゲット列 tgt を除いたデータ。モデルのトレーニングに使用する特徴量を含みます。\n",
        "#y_train:データフレーム train の 3 列目以降の中からターゲット列 tgt のデータだけを含むデータ。モデルのトレーニングに使用するターゲット変数を含みます。\n",
        "X_test, y_test = (\n",
        "    test\n",
        "    .iloc[:, 3:]\n",
        "    .drop(columns=tgt)\n",
        "    , test\n",
        "    .iloc[:, 3:]\n",
        "    [tgt]\n",
        ")\n",
        "\n",
        "# %% 本番用\n",
        "ptrain = mrt.loc[lambda df: df[\"年度\"] >= 2017].loc[lambda df: df[\"年度\"] < 2023]\n",
        "ptest = mrt.loc[lambda df: df[\"年度\"] == 2023]\n",
        "print(ptrain.shape, ptest.shape)\n",
        "\n",
        "X_ptrain, y_ptrain = (\n",
        "    ptrain\n",
        "    .iloc[:, 3:]\n",
        "    .drop(columns=tgt)\n",
        "    , ptrain\n",
        "    .iloc[:, 3:]\n",
        "    [tgt]\n",
        ")\n",
        "X_ptest, y_ptest = (\n",
        "    ptest\n",
        "    .iloc[:, 3:]\n",
        "    .drop(columns=tgt)\n",
        "    , ptest\n",
        "    .iloc[:, 3:]\n",
        "    [tgt]\n",
        ")\n",
        "\n",
        "# %%\n",
        "import optuna\n",
        "from sklearn.model_selection import cross_val_score, StratifiedKFold\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.tree import plot_tree, export_text\n",
        "from sklearn.metrics import roc_auc_score\n",
        "\n",
        "# %%\n",
        "def objective(trial):\n",
        "    # Define the hyperparameters to tune\n",
        "    max_depth = trial.suggest_int(\"max_depth\", 2, 8)\n",
        "    min_samples_split = trial.suggest_float(\"min_samples_split\", 0.001, 0.999)\n",
        "    max_leaf_nodes = int(trial.suggest_int(\"max_leaf_nodes\", 2, 128))\n",
        "    criterion = trial.suggest_categorical(\"criterion\", [\"gini\", \"entropy\"])\n",
        "\n",
        "    # Create the decision tree classifier with the suggested hyperparameters\n",
        "    model = DecisionTreeClassifier(\n",
        "        criterion=criterion,\n",
        "        max_depth=max_depth,\n",
        "        max_leaf_nodes=max_leaf_nodes,\n",
        "        min_samples_split=min_samples_split,\n",
        "    )\n",
        "\n",
        "    # Perform cross-validation with AUC as the scoring metric\n",
        "    kf = StratifiedKFold(n_splits=3, shuffle=True, random_state=42)\n",
        "    cv_scores = cross_val_score(model, X_train, y_train, cv=kf, scoring='roc_auc')\n",
        "\n",
        "    # Return the average AUC score from cross-validation as the objective value\n",
        "    return cv_scores.mean()\n",
        "# %%\n",
        "study = optuna.create_study(direction='maximize')\n",
        "study.optimize(objective, n_trials=64, n_jobs=4)\n",
        "best_params = study.best_trial.params\n",
        "print(\"Best Hyperparameters:\", best_params)\n",
        "# {'max_depth': 8, 'min_samples_split': 0.09421974892381257, 'max_leaf_nodes': 85, 'criterion': 'entropy'}\n",
        "# Best is trial 26 with value: 0.9360626401718072.\n",
        "# %%\n",
        "best_params = {'max_depth': 8, 'min_samples_split': 0.09421974892381257, 'max_leaf_nodes': 85, 'criterion': 'entropy'}\n",
        "model = DecisionTreeClassifier(**best_params)\n",
        "_X_train = (\n",
        "    X_train\n",
        "    .loc[:, lambda df: ~ df.columns.str.contains(\"虐待（疑いを含む）|3歳６か月健診_方法理由=43.0|方法=保健師フォロー|当てはまるもの=感情的に叩いた\")]\n",
        ")\n",
        "model.fit(_X_train, y_train)\n",
        "plt.figure(figsize=(20, 9))\n",
        "plot_tree(\n",
        "    model,\n",
        "    feature_names=model.feature_names_in_,\n",
        "    filled=True,\n",
        "    class_names=[\"虐待なし\", \"虐待あり\"],\n",
        "    fontsize=10\n",
        ")\n",
        "# %%\n",
        "print(export_text(model, feature_names=_X_train.columns.to_list()))\n",
        "# \"\"\"\n",
        "# |--- 1.要対協_要対協_被虐待数_昨年度累計_昨年差分 <= 0.50\n",
        "# |   |--- 5.家児相.csv_家児相_ケース区分=虐待_昨年度累計回数 <= 0.50\n",
        "# |   |   |--- 3.生活保護.csv_被保護世帯員個人情報一覧_世帯被生保延べ人数 <= 1.50\n",
        "# |   |   |   |--- 3.ひとり親医療受給者.csv_ひとり親医療受給者_受給回数_昨年差分 <= 0.50\n",
        "# |   |   |   |   |--- 1.要対協_要対協_被虐待数_昨年度累計 <= 0.50\n",
        "# |   |   |   |   |   |--- 5.家児相.csv_家児相_ケース区分=相談_昨年度累計回数 <= 0.50\n",
        "# |   |   |   |   |   |   |--- 2.出生～４か月健診.csv_出生～４か月健診_総合判定=要観察_フラグ <= 0.50\n",
        "# |   |   |   |   |   |   |   |--- 3.こども医療受給者.csv_こども医療受給者_受給回数 <= 0.50\n",
        "# |   |   |   |   |   |   |   |   |--- class: 0.0\n",
        "# |   |   |   |   |   |   |   |--- 3.こども医療受給者.csv_こども医療受給者_受給回数 >  0.50\n",
        "# |   |   |   |   |   |   |   |   |--- class: 0.0\n",
        "# |   |   |   |   |   |   |--- 2.出生～４か月健診.csv_出生～４か月健診_総合判定=要観察_フラグ >  0.50\n",
        "# |   |   |   |   |   |   |   |--- 4.世帯人数.csv_世帯人数_3歳未満人数 <= 0.50\n",
        "# |   |   |   |   |   |   |   |   |--- class: 0.0\n",
        "# |   |   |   |   |   |   |   |--- 4.世帯人数.csv_世帯人数_3歳未満人数 >  0.50\n",
        "# |   |   |   |   |   |   |   |   |--- class: 0.0\n",
        "# |   |   |   |   |   |--- 5.家児相.csv_家児相_ケース区分=相談_昨年度累計回数 >  0.50\n",
        "# |   |   |   |   |   |   |--- class: 0.0\n",
        "# |   |   |   |   |--- 1.要対協_要対協_被虐待数_昨年度累計 >  0.50\n",
        "# |   |   |   |   |   |--- class: 0.0\n",
        "# |   |   |   |--- 3.ひとり親医療受給者.csv_ひとり親医療受給者_受給回数_昨年差分 >  0.50\n",
        "# |   |   |   |   |--- class: 0.0\n",
        "# |   |   |--- 3.生活保護.csv_被保護世帯員個人情報一覧_世帯被生保延べ人数 >  1.50\n",
        "# |   |   |   |--- class: 0.0\n",
        "# |   |--- 5.家児相.csv_家児相_ケース区分=虐待_昨年度累計回数 >  0.50\n",
        "# |   |   |--- class: 0.0\n",
        "# |--- 1.要対協_要対協_被虐待数_昨年度累計_昨年差分 >  0.50\n",
        "# |   |--- class: 1.0\n",
        "# \"\"\"\n",
        "# %%\n",
        "cond = (X_test[\"1.要対協_要対協_被虐待数_昨年度累計\"] <= 0)\n",
        "proba = (\n",
        "    model\n",
        "    .predict_proba(\n",
        "        X_test\n",
        "        .loc[:, lambda df: ~ df.columns.str.contains(\"虐待（疑いを含む）|3歳６か月健診_方法理由=43.0|方法=保健師フォロー|当てはまるもの=感情的に叩いた\")]\n",
        "        # .loc[cond]\n",
        "    )\n",
        "    [:,1]\n",
        ")\n",
        "print(roc_auc_score(y_true=y_test, y_score=proba))\n",
        "valid = (\n",
        "    test\n",
        "    .iloc[:, :10]\n",
        "    .assign(リスクスコア = proba)\n",
        ")\n",
        "# %%\n",
        "display(\n",
        "    valid\n",
        "    .loc[lambda df: df[tgt]==1]\n",
        "    .groupby(\"リスクスコア\", as_index=False)\n",
        "    .size()\n",
        "    .assign(pct = lambda df: df[\"size\"] / df[\"size\"].sum())\n",
        "    # .style.bar()\n",
        "    # .to_excel(\"../doc/20240115_2022年度の被虐待者に対するスコア.xlsx\")\n",
        ")\n",
        "display(\n",
        "    valid\n",
        "    .groupby(tgt)\n",
        "    [\"リスクスコア\"]\n",
        "    .describe()\n",
        ")\n",
        "# %%\n",
        "display(\n",
        "    valid\n",
        "    .assign(正解 = lambda df: df[tgt])\n",
        "    # .assign(予測 = lambda df: (df[\"リスクスコア\"] >= 0.13) * 1)\n",
        "    .assign(予測 = lambda df: (df[\"リスクスコア\"] >= 0.52) * 1)\n",
        "    .pivot_table(index=\"予測\", columns=\"正解\", aggfunc=\"size\")\n",
        "    .assign(TTL = lambda df: df.sum(axis=1))\n",
        "    .assign(precision = lambda df: df[1] / df[\"TTL\"])\n",
        ")\n",
        "# %%\n",
        "_valid = valid.loc[lambda df: df[\"1.要対協_要対協_被虐待数_昨年度累計\"] <= 0]\n",
        "display(\n",
        "    _valid\n",
        "    .loc[lambda df: df[tgt]==1]\n",
        "    .groupby(\"リスクスコア\", as_index=False)\n",
        "    .size()\n",
        "    .assign(pct = lambda df: df[\"size\"] / df[\"size\"].sum())\n",
        "    # .style.bar()\n",
        "    # .to_excel(\"../doc/20240115_2022年度の被虐待者に対するスコア.xlsx\")\n",
        ")\n",
        "display(\n",
        "    _valid\n",
        "    .groupby(tgt)\n",
        "    [\"リスクスコア\"]\n",
        "    .describe()\n",
        ")\n",
        "# %%\n",
        "display(\n",
        "    _valid\n",
        "    .assign(正解 = lambda df: df[tgt])\n",
        "    .assign(予測 = lambda df: (df[\"リスクスコア\"] >= 0.13) * 1)\n",
        "    # .assign(予測 = lambda df: (df[\"リスクスコア\"] >= 0.52) * 1)\n",
        "    .pivot_table(index=\"予測\", columns=\"正解\", aggfunc=\"size\")\n",
        "    .assign(TTL = lambda df: df.sum(axis=1))\n",
        "    .assign(precision = lambda df: df[1] / df[\"TTL\"])\n",
        ")\n",
        "\n",
        "# %%\n",
        "proba = model.predict_proba(X_ptest.loc[:, lambda df: ~ df.columns.str.contains(\"虐待（疑いを含む）|3歳６か月健診_方法理由=43.0|方法=保健師フォロー|当てはまるもの=感情的に叩いた\")])[:,1]\n",
        "# print(roc_auc_score(y_true=y_ptest, y_score=proba))\n",
        "valid = (\n",
        "    ptest\n",
        "    .iloc[:, :6]\n",
        "    .assign(リスクスコア = proba)\n",
        ")\n",
        "# %%\n",
        "display(\n",
        "    valid\n",
        "    .loc[lambda df: df[tgt]==1]\n",
        "    .style.bar()\n",
        "    # .to_excel(\"../doc/20240112_2022年度の被虐待者に対するスコア+.xlsx\")\n",
        ")\n",
        "display(\n",
        "    valid\n",
        "    .groupby(tgt)\n",
        "    [\"リスクスコア\"]\n",
        "    .describe()\n",
        ")\n",
        "# %%\n",
        "display(\n",
        "    valid\n",
        "    .assign(正解 = lambda df: df[tgt])\n",
        "    # .assign(予測 = lambda df: (df[\"リスクスコア\"] >= 0.13) * 1)\n",
        "    .assign(予測 = lambda df: (df[\"リスクスコア\"] >= 0.52) * 1)\n",
        "    .pivot_table(index=\"予測\", columns=\"正解\", aggfunc=\"size\")\n",
        "    .assign(TTL = lambda df: df.sum(axis=1))\n",
        "    .assign(precision = lambda df: df[1] / df[\"TTL\"])\n",
        ")\n",
        "# %%\n",
        "(\n",
        "    valid\n",
        "    .groupby(\"リスクスコア\", as_index=False)\n",
        "    [\"1.要対協_要対協_被虐待フラグ\"]\n",
        "    .agg([\"count\", \"sum\", \"mean\"])\n",
        "    .to_excel(\"../doc/20240115_2023年度スコア付きリストサマリ.xlsx\")\n",
        ")\n",
        "# %%\n",
        "model = DecisionTreeClassifier(**best_params)\n",
        "model.fit(X_ptrain, y_ptrain)\n",
        "plt.figure(figsize=(20, 9))\n",
        "plot_tree(\n",
        "    model,\n",
        "    feature_names=model.feature_names_in_,\n",
        "    filled=True,\n",
        "    class_names=[\"虐待なし\", \"虐待あり\"],\n",
        "    fontsize=10\n",
        ")\n",
        "print(export_text(model, feature_names=X_ptrain.columns.to_list()))\n",
        "\"\"\"\n",
        "|--- 1.要対協_要対協_被虐待数_昨年度累計_昨年差分 <= 0.50\n",
        "|   |--- 5.家児相.csv_家児相_ケース区分=虐待_昨年度累計回数 <= 0.50\n",
        "|   |   |--- 2.1歳６か月健診.csv_1歳６か月健診_理由=育児環境　虐待（疑いを含む）_フラグ <= 0.50\n",
        "|   |   |   |--- 3.生活保護.csv_被保護世帯員個人情報一覧_世帯被生保延べ人数 <= 1.50\n",
        "|   |   |   |   |--- 1.要対協_要対協_被虐待数_昨年度累計 <= 0.50\n",
        "|   |   |   |   |   |--- 4.世帯人数.csv_世帯人数_18歳以上人数 <= 1.50\n",
        "|   |   |   |   |   |   |--- 5.家児相.csv_家児相_ケース区分=相談_昨年度累計回数 <= 0.50\n",
        "|   |   |   |   |   |   |   |--- 3.こども医療受給者.csv_こども医療受給者_受給回数 <= 1.50\n",
        "|   |   |   |   |   |   |   |   |--- class: 0.0\n",
        "|   |   |   |   |   |   |   |--- 3.こども医療受給者.csv_こども医療受給者_受給回数 >  1.50\n",
        "|   |   |   |   |   |   |   |   |--- class: 0.0\n",
        "|   |   |   |   |   |   |--- 5.家児相.csv_家児相_ケース区分=相談_昨年度累計回数 >  0.50\n",
        "|   |   |   |   |   |   |   |--- class: 0.0\n",
        "|   |   |   |   |   |--- 4.世帯人数.csv_世帯人数_18歳以上人数 >  1.50\n",
        "|   |   |   |   |   |   |--- 2.3歳６か月健診.csv_3歳６か月健診_方法理由=43.0_フラグ <= 0.50\n",
        "|   |   |   |   |   |   |   |--- 2.出生～４か月健診.csv_出生～４か月健診_理由=育児環境　虐待（疑いを含む）_フラグ <= 0.50\n",
        "|   |   |   |   |   |   |   |   |--- class: 0.0\n",
        "|   |   |   |   |   |   |   |--- 2.出生～４か月健診.csv_出生～４か月健診_理由=育児環境　虐待（疑いを含む）_フラグ >  0.50\n",
        "|   |   |   |   |   |   |   |   |--- class: 0.0\n",
        "|   |   |   |   |   |   |--- 2.3歳６か月健診.csv_3歳６か月健診_方法理由=43.0_フラグ >  0.50\n",
        "|   |   |   |   |   |   |   |--- class: 0.0\n",
        "|   |   |   |   |--- 1.要対協_要対協_被虐待数_昨年度累計 >  0.50\n",
        "|   |   |   |   |   |--- class: 0.0\n",
        "|   |   |   |--- 3.生活保護.csv_被保護世帯員個人情報一覧_世帯被生保延べ人数 >  1.50\n",
        "|   |   |   |   |--- class: 0.0\n",
        "|   |   |--- 2.1歳６か月健診.csv_1歳６か月健診_理由=育児環境　虐待（疑いを含む）_フラグ >  0.50\n",
        "|   |   |   |--- class: 0.0\n",
        "|   |--- 5.家児相.csv_家児相_ケース区分=虐待_昨年度累計回数 >  0.50\n",
        "|   |   |--- class: 0.0\n",
        "|--- 1.要対協_要対協_被虐待数_昨年度累計_昨年差分 >  0.50\n",
        "|   |--- class: 0.0\n",
        "\"\"\"\n",
        "# %%\n",
        "(\n",
        "   pd\n",
        "   .read_csv(\"../data_clns+/1.要対協_目的変数.csv\")\n",
        "   .sort_values([\"宛名番号\", \"年度\"])\n",
        "   .assign(昨年 = lambda df: df.groupby(\"宛名番号\")[\"要対協_被虐待フラグ\"].shift())\n",
        "   .groupby([\"年度\", \"要対協_被虐待フラグ\", \"昨年\"], as_index=False)\n",
        "   .size()\n",
        ")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 385
        },
        "id": "f8DfsMbiB84g",
        "outputId": "78e4a096-a5c0-493d-9cc1-807400d09a11"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "error",
          "ename": "FileNotFoundError",
          "evalue": "[Errno 2] No such file or directory: '../data_clns+/0.母集団.csv'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-19-15dcda98813f>\u001b[0m in \u001b[0;36m<cell line: 12>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m df_pop = (\n\u001b[1;32m     12\u001b[0m     \u001b[0mpd\u001b[0m \u001b[0;31m#ファイルの読み込み\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m     \u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"../data_clns+/0.母集団.csv\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m )\n\u001b[1;32m     15\u001b[0m \u001b[0mdf_pop\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[1;32m    946\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    947\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 948\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    949\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    950\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    609\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    610\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 611\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    612\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    613\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1446\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1447\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1448\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1449\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1450\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1703\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1704\u001b[0m                     \u001b[0mmode\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"b\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1705\u001b[0;31m             self.handles = get_handle(\n\u001b[0m\u001b[1;32m   1706\u001b[0m                 \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1707\u001b[0m                 \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    861\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    862\u001b[0m             \u001b[0;31m# Encoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 863\u001b[0;31m             handle = open(\n\u001b[0m\u001b[1;32m    864\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    865\u001b[0m                 \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '../data_clns+/0.母集団.csv'"
          ]
        }
      ]
    }
  ]
}